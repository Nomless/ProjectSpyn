TOUCH_PORT = 4;
ULTRASONIC_PORT = 1;
GYRO_PORT = 2;
COLOR_PORT = 3;
LEFT_DRIVE_MOTOR = 'D';
RIGHT_DRIVE_MOTOR = 'C';
ARM_MOTOR = 'A';

% 2 - Blue
% 3 - Green
% 4 - Yellow
% 5 - Red
STOP_COLOR = 5;
PICKUP_COLOR = 2;
DROPOFF_COLOR = 4;

DRIVE_SPEED = 60;
LEFT_OFFSET = 5;
TURN_SPEED = 100;

gyro_offset = 0;
touched = false;
dropoff = false;

function ret = GetColor(brick, port)
    rgb = brick.ColorRGB(port);
    red = rgb(1);
    green = rgb(2);
    blue = rgb(3);
    magnitude = sqrt(double(red * red + green * green + blue * blue));
    if magnitude < 100
        ret = 0;
    elseif red > 100
        if green > 80
            ret = 4;
        else
            ret = 5;
        end
    elseif blue > 150
        ret = 2;
    elseif green > 115
        ret = 3;
    else
        ret = 0;
    end
end

function OldTurn(brick, gyro_port, left_port, right_port, color_port, target)
    % target angle is cw+
    brick.GyroCalibrate(gyro_port);
    angle = brick.GyroAngle(gyro_port);
    if isnan(angle)
        angle = 0;
    end
    error = target - angle;
    p = 600;
    if GetColor(brick, color_port) > 0
        p = 400;
    end
    %i = 0.01;
    t = 0;
    while abs(error) > 1 && t <= 2
        angle = brick.GyroAngle(gyro_port);
        error = target - angle;
        n_error = error / 360;
        out = clip(p * n_error, -100, 100);
        brick.MoveMotor(left_port, out);
        brick.MoveMotor(right_port, -out);
        t = t + 0.1;
        pause(0.1);
    end
    brick.StopMotor(left_port);
    brick.StopMotor(right_port);
    brick.GyroCalibrate(gyro_port);
end

function ret = Turn(brick, gyro_port, left_port, right_port, color_port, target, gyro_offset)
    %ret = gyro_offset - target / 40;
    ret = 0;
    % target angle is cw+
    initial_angle = brick.GyroAngle(gyro_port);
    while isnan(initial_angle)
        initial_angle = brick.GyroAngle(gyro_port);
    end
    error = target + gyro_offset;
    p = 600;
    if GetColor(brick, color_port) > 0
        p = 400;
    end
    %i = 0.01;
    t = 0;
    while abs(error) > 1 && t <= 2
        angle = brick.GyroAngle(gyro_port);
        error = target + gyro_offset - (angle - initial_angle);
        n_error = error / 360;
        out = clip(p * n_error, -100, 100);
        brick.MoveMotor(left_port, out);
        brick.MoveMotor(right_port, -out);
        t = t + 0.1;
        pause(0.1);
    end
    brick.StopMotor(left_port);
    brick.StopMotor(right_port);
end

expected = 0;
function ret = TurnFixed(brick, gyro_port, left_port, right_port, color_port, target, expected)
    ret = expected + target;
    % target angle is cw+
    initial_angle = brick.GyroAngle(gyro_port);
    while isnan(initial_angle)
        initial_angle = brick.GyroAngle(gyro_port);
    end
    error = target;
    p = 600;
    if GetColor(brick, color_port) > 0
        p = 400;
    end
    %i = 0.01;
    t = 0;
    while abs(error) > 1 && t <= 2
        angle = brick.GyroAngle(gyro_port);
        error = target - (angle - initial_angle);
        n_error = error / 360;
        out = clip(p * n_error, -100, 100);
        brick.MoveMotor(left_port, out);
        brick.MoveMotor(right_port, -out);
        t = t + 0.1;
        pause(0.1);
    end
    brick.StopMotor(left_port);
    brick.StopMotor(right_port);
end

function KeyboardControl(brick, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, ARM_MOTOR, speed)
    global key
    InitKeyboard();
    
    while 1
        pause(0.1);
        switch key
            case 'w'
                brick.MoveMotor(LEFT_DRIVE_MOTOR, speed);
                brick.MoveMotor(RIGHT_DRIVE_MOTOR, speed);
            case 'a'
                brick.MoveMotor(LEFT_DRIVE_MOTOR, -speed);
                brick.MoveMotor(RIGHT_DRIVE_MOTOR, speed);
            case 's'
                brick.MoveMotor(LEFT_DRIVE_MOTOR, -speed);
                brick.MoveMotor(RIGHT_DRIVE_MOTOR, -speed);
            case 'd'
                brick.MoveMotor(LEFT_DRIVE_MOTOR, speed);
                brick.MoveMotor(RIGHT_DRIVE_MOTOR, -speed);
            case 'i'
                brick.MoveMotor(ARM_MOTOR, -speed / 8);
            case 'o'
                brick.MoveMotor(ARM_MOTOR, speed / 8);
            case 0
                brick.StopMotor(LEFT_DRIVE_MOTOR);
                brick.StopMotor(RIGHT_DRIVE_MOTOR);
                brick.StopMotor(ARM_MOTOR);
                
            case 'p'
                break;
        end
    end
    brick.StopMotor(LEFT_DRIVE_MOTOR);
    brick.StopMotor(RIGHT_DRIVE_MOTOR);
    brick.StopMotor(ARM_MOTOR);
    CloseKeyboard();
end

brick.GyroCalibrate(GYRO_PORT);
brick.SetColorMode(3, 4);

%brick.beep();

brick.MoveMotor(LEFT_DRIVE_MOTOR, DRIVE_SPEED + LEFT_OFFSET);
brick.MoveMotor(RIGHT_DRIVE_MOTOR, DRIVE_SPEED);

last_turn = 0;

while 1
    if isnan(brick.TouchPressed(TOUCH_PORT))
        disp("NaN???");
        continue
    end
    if ~touched && brick.TouchPressed(TOUCH_PORT)
        disp("Touching wall");
        touched = true;
        brick.MoveMotor(LEFT_DRIVE_MOTOR, -DRIVE_SPEED);
        brick.MoveMotor(RIGHT_DRIVE_MOTOR, -DRIVE_SPEED);
        pause(0.5);
        brick.StopMotor(LEFT_DRIVE_MOTOR);
        brick.StopMotor(RIGHT_DRIVE_MOTOR);
        continue;
    end
    distance = brick.UltrasonicDist(ULTRASONIC_PORT);
    color = GetColor(brick, COLOR_PORT);
    if touched
        % move right
        %gyro_offset = Turn(brick, GYRO_PORT, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, COLOR_PORT, 90, gyro_offset);
        expected = TurnFixed(brick, GYRO_PORT, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, COLOR_PORT, 90, expected);
        touched = false;
        pause(0.5);
        brick.MoveMotor(LEFT_DRIVE_MOTOR, DRIVE_SPEED + LEFT_OFFSET);
        brick.MoveMotor(RIGHT_DRIVE_MOTOR, DRIVE_SPEED);
        last_turn = 0;
    elseif color ~= 0
        if color == STOP_COLOR
            brick.StopMotor(LEFT_DRIVE_MOTOR);
            brick.StopMotor(RIGHT_DRIVE_MOTOR);
            pause(1);
            brick.MoveMotor(LEFT_DRIVE_MOTOR, DRIVE_SPEED + LEFT_OFFSET);
            brick.MoveMotor(RIGHT_DRIVE_MOTOR, DRIVE_SPEED);
            pause(0.5);
            last_turn = 0;
        elseif color == PICKUP_COLOR
            brick.StopMotor(LEFT_DRIVE_MOTOR);
            brick.StopMotor(RIGHT_DRIVE_MOTOR);
            pause(1);
            brick.beep();
            pause(1);
            brick.beep();
            %while GetColor(brick, COLOR_PORT) == PICKUP_COLOR
                %pause(1);
            %end
            KeyboardControl(brick, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, ARM_MOTOR, DRIVE_SPEED)
            brick.MoveMotor(LEFT_DRIVE_MOTOR, DRIVE_SPEED + LEFT_OFFSET);
            brick.MoveMotor(RIGHT_DRIVE_MOTOR, DRIVE_SPEED);
            dropoff = true;
            pause(0.5);
            last_turn = 0;
        elseif color == DROPOFF_COLOR && dropoff == true
            brick.StopMotor(LEFT_DRIVE_MOTOR);
            brick.StopMotor(RIGHT_DRIVE_MOTOR);
            pause(1);
            brick.beep();
            pause(1);
            brick.beep();
            pause(1);
            brick.beep();
            %while GetColor(brick, COLOR_PORT) == DROPOFF_COLOR
                %pause(1);
            %end
            KeyboardControl(brick, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, ARM_MOTOR, DRIVE_SPEED)
            brick.MoveMotor(LEFT_DRIVE_MOTOR, DRIVE_SPEED + LEFT_OFFSET);
            brick.MoveMotor(RIGHT_DRIVE_MOTOR, DRIVE_SPEED);
            pause(0.5);
            last_turn = 0;
        end
    elseif distance > 60
        % move left
        % gyro_offset = Turn(brick, GYRO_PORT, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, COLOR_PORT, -90, gyro_offset);
        expected = TurnFixed(brick, GYRO_PORT, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, COLOR_PORT, -90, expected);
        pause(0.5);
        brick.MoveMotor(LEFT_DRIVE_MOTOR, DRIVE_SPEED + LEFT_OFFSET);
        brick.MoveMotor(RIGHT_DRIVE_MOTOR, DRIVE_SPEED);
        for i = 1:16
            if GetColor(brick, COLOR_PORT) == STOP_COLOR
                brick.StopMotor(LEFT_DRIVE_MOTOR);
                brick.StopMotor(RIGHT_DRIVE_MOTOR);
                pause(2);
                brick.MoveMotor(LEFT_DRIVE_MOTOR, DRIVE_SPEED + LEFT_OFFSET);
                brick.MoveMotor(RIGHT_DRIVE_MOTOR, DRIVE_SPEED);
                break;
            end
            pause(0.1);
        end
        last_turn = 0;
    elseif last_turn > 10
        brick.MoveMotor(LEFT_DRIVE_MOTOR, -DRIVE_SPEED);
        brick.MoveMotor(RIGHT_DRIVE_MOTOR, -DRIVE_SPEED);
        pause(0.75);
        brick.StopMotor(LEFT_DRIVE_MOTOR);
        brick.StopMotor(RIGHT_DRIVE_MOTOR);
        %gyro_offset = Turn(brick, GYRO_PORT, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, COLOR_PORT, 45, gyro_offset);
        expected = TurnFixed(brick, GYRO_PORT, LEFT_DRIVE_MOTOR, RIGHT_DRIVE_MOTOR, COLOR_PORT, 45, expected);
        brick.MoveMotor(LEFT_DRIVE_MOTOR, DRIVE_SPEED + LEFT_OFFSET);
        brick.MoveMotor(RIGHT_DRIVE_MOTOR, DRIVE_SPEED);
        last_turn = 0;
    end
    last_turn = last_turn + 0.5
    pause(0.1);
end